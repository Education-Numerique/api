#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import pkg_resources
from os import fork, chdir, setsid, umask
from sys import exit
from wsgiref.simple_server import make_server
from optparse import OptionParser
import zc.lockfile
import signal

parser = OptionParser()
parser.add_option("-p", "--port", dest="port", help="service port", default=8084) 
(options, args) = parser.parse_args()

try:
    options.port = int(options.port)
except:
    options.port = 8084

if len(args) == 0:
    print('Please use one of the following \
        command (start|stop|restart|status)')
    exit(1)

command = args.pop(0)

if not command in ['start', 'stop', 'restart', 'status']:
    print('Please use one of the following \
        command (start|stop|restart|status)')
    exit(1)

# insert contrib libs just after current directory
ROOT = os.path.join(pkg_resources.get_distribution('lxxl').location, 'lxxl')

from lxxl.lib.config import Config
from lxxl.lib import log, app, storage


CONFIG_FILE = os.path.join(ROOT, 'conf', 'common.yml')
STORAGE_FILE = os.path.join(ROOT, 'conf', 'storage.yml')
ROUTING_FILE = os.path.join(ROOT, 'conf', 'routing', 'authentication')
COMMON_ROUTING_FILE = os.path.join(ROOT, 'conf', 'routing', 'common.yml')


cfg = Config(CONFIG_FILE)
cfg.include(STORAGE_FILE)
cfg.include(os.path.join(ROUTING_FILE, 'admin.yml'))
cfg.include(COMMON_ROUTING_FILE)

routing = cfg.get('common_routing')
routing = routing + cfg.get('routing')

#log.init()

application = app.Controller()
application.addRoutingFromConfig('*', routing)

lockFilePath = os.path.join(os.path.dirname(__file__), 'lxxl.authentication.admin.pid')

def check_pid(pid):        
    """ Check For the existence of a unix pid. """
    try:
        os.kill(pid, 0)
    except OSError:
        return False
    else:
        return True

def start_server():
    print('LxxL authentication admin server is running (#%s). :%s' % (os.getpid(), options.port))
    make_server('localhost', options.port, application).serve_forever()

if __name__ == '__main__':
    currentPid = None
    if os.path.exists(lockFilePath):
        try:
            fileHandler = open(lockFilePath)
            currentPid = int(fileHandler.read())
            fileHandler.close()
        except:
            pass

    if currentPid and not check_pid(currentPid):
        currentPid = None

    if currentPid and command == 'start':
        print('LxxL authentication admin server already running')
        exit(1)

    if currentPid and command == 'status':
        print('LxxL authentication admin server is running #pid %s' % currentPid)
        exit(1)

    if not currentPid and command == 'status':
        print('LxxL authentication admin server  is not running')
        exit(1)

    if currentPid and (command == 'stop' or command == 'restart'):
        print('Stopping LxxL authentication admin server #%s ...' % currentPid)
        os.kill(currentPid, signal.SIGTERM)
        os.remove(lockFilePath)
        print('Server stopped')
        if command == 'stop':
            exit(1)

    if not currentPid and command == 'stop':
        print('LxxL authentication admin is not running. Nothing to stop')
        exit(1)

    try:
        pid = fork()
        if pid > 0:
            exit(0)
    except OSError as e:
        exit(1)

    chdir("/")
    setsid()
    umask(0)

    try:
        pid = fork()
        if pid > 0:
            exit(0)
    except OSError as e:
        exit(1)

    lock = zc.lockfile.LockFile(lockFilePath)
    start_server()
